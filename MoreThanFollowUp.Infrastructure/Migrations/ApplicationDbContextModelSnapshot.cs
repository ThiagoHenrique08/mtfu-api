// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoreThanFollowUp.Infrastructure.Context;

#nullable disable

namespace MoreThanFollowUp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.DirectOrFunctionalRequirement", b =>
                {
                    b.Property<Guid>("DirectOrFunctionalRequirementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("FunctionOrAction")
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<Guid?>("RequirementAnalysisId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("SystemBehavior")
                        .HasColumnType("VARCHAR(MAX)");

                    b.HasKey("DirectOrFunctionalRequirementId");

                    b.HasIndex("RequirementAnalysisId");

                    b.ToTable("DirectOrFunctionalRequirements", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.Planning", b =>
                {
                    b.Property<Guid>("PlanningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("DocumentationLink")
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("End Date");

                    b.Property<string>("PlanningDescription")
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Start Date");

                    b.HasKey("PlanningId");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasFilter("[ProjectId] IS NOT NULL");

                    b.ToTable("Plannings", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("Category")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("StartDate");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("EndDate");

                    b.Property<Guid?>("EnterpriseId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("Responsible")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Status")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Title")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("ProjectId");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.Project_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataCriacao");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUsers", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.RequirementAnalysis", b =>
                {
                    b.Property<Guid>("RequirementAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("End Date");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Start Date");

                    b.HasKey("RequirementAnalysisId");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasFilter("[ProjectId] IS NOT NULL");

                    b.ToTable("RequirementAnalysis", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.Sprint", b =>
                {
                    b.Property<Guid>("SprintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("Description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("End Date");

                    b.Property<Guid?>("PlanningId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid?>("RequirementAnalysisId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<int?>("SprintScore")
                        .HasColumnType("INT");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Start Date");

                    b.Property<string>("Status")
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("Status");

                    b.Property<string>("Title")
                        .HasColumnType("VARCHAR(MAX)")
                        .HasColumnName("Link");

                    b.HasKey("SprintId");

                    b.HasIndex("PlanningId");

                    b.HasIndex("RequirementAnalysisId");

                    b.ToTable("Sprints", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.Sprint_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataCriacao");

                    b.Property<Guid?>("SprintId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SprintId");

                    b.HasIndex("UserId");

                    b.ToTable("SprintUsers", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Resources.ProjectCategory", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("Name")
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("Name");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Resources.ProjectResponsible", b =>
                {
                    b.Property<Guid>("ResponsibleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("Name");

                    b.HasKey("ResponsibleId");

                    b.ToTable("Responsible", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Resources.ProjectStatus", b =>
                {
                    b.Property<Guid>("StatusProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(30)")
                        .HasColumnName("Name");

                    b.HasKey("StatusProjectId");

                    b.ToTable("ProjectStatus", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("CompletedName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Function")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.ApplicationUserRoleEnterprise", b =>
                {
                    b.Property<Guid>("ApplicationUserRoleEnterpriseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid?>("EnterpriseId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("RoleId");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserId");

                    b.HasKey("ApplicationUserRoleEnterpriseId");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUserRoleEnterprises", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.Enterprise", b =>
                {
                    b.Property<Guid>("EnterpriseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("CNPJ")
                        .HasColumnType("VARCHAR(18)");

                    b.Property<string>("CorporateReason")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("Segment")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("EnterpriseId");

                    b.HasIndex("TenantId");

                    b.ToTable("Enterprises", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.Enterprise_User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<Guid?>("EnterpriseId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseId");

                    b.HasIndex("UserId");

                    b.ToTable("EnterpriseUsers", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("DECIMAL(10,2)");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Status")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.HasKey("InvoiceId");

                    b.HasIndex("SubscriptionId")
                        .IsUnique()
                        .HasFilter("[SubscriptionId] IS NOT NULL");

                    b.ToTable("Invoices", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.Subscription", b =>
                {
                    b.Property<Guid>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Plan")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Status")
                        .HasColumnType("VARCHAR(30)");

                    b.Property<Guid?>("TenantId")
                        .IsRequired()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<int?>("TotalAvailable")
                        .HasColumnType("INT");

                    b.Property<int?>("TotalLicense")
                        .HasColumnType("INT");

                    b.Property<int?>("TotalUsed")
                        .HasColumnType("INT");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("TenantId")
                        .IsUnique();

                    b.ToTable("Subscriptions", (string)null);
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.Tenant", b =>
                {
                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UNIQUEIDENTIFIER");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Responsible")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("TenantCustomDomain")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("TenantName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("TenantStatus")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("TenantId");

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MoreThanFollowUp.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.DirectOrFunctionalRequirement", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Entities.Projects.RequirementAnalysis", "RequirementAnalysis")
                        .WithMany("DirectOrFunctionalRequirement")
                        .HasForeignKey("RequirementAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("RequirementAnalysis");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.Planning", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Entities.Projects.Project", "Project")
                        .WithOne("Planning")
                        .HasForeignKey("MoreThanFollowUp.Domain.Entities.Projects.Planning", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.Project", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Models.Enterprise", "Enterprise")
                        .WithMany("Projects")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Enterprise");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.Project_User", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Entities.Projects.Project", "Project")
                        .WithMany("Projects_Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoreThanFollowUp.Domain.Models.ApplicationUser", "User")
                        .WithMany("Projects_Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.RequirementAnalysis", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Entities.Projects.Project", "Project")
                        .WithOne("RequirementAnalysis")
                        .HasForeignKey("MoreThanFollowUp.Domain.Entities.Projects.RequirementAnalysis", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.Sprint", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Entities.Projects.Planning", "Planning")
                        .WithMany("Sprints")
                        .HasForeignKey("PlanningId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MoreThanFollowUp.Domain.Entities.Projects.RequirementAnalysis", "RequirementAnalysis")
                        .WithMany("Sprints")
                        .HasForeignKey("RequirementAnalysisId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Planning");

                    b.Navigation("RequirementAnalysis");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.Sprint_User", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Entities.Projects.Sprint", "Sprint")
                        .WithMany("Sprint_Users")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoreThanFollowUp.Domain.Models.ApplicationUser", "User")
                        .WithMany("Sprint_Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Sprint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.ApplicationUserRoleEnterprise", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Models.Enterprise", "Enterprise")
                        .WithMany("Users_Roles_Enteprises")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoreThanFollowUp.Domain.Models.ApplicationRole", "Role")
                        .WithMany("Users_Roles_Enteprises")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoreThanFollowUp.Domain.Models.ApplicationUser", "User")
                        .WithMany("Users_Roles_Enteprises")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Enterprise");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.Enterprise", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Models.Tenant", "Tenant")
                        .WithMany("Enterprises")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.Enterprise_User", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Models.Enterprise", "Enterprise")
                        .WithMany("Enterprises_Users")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MoreThanFollowUp.Domain.Models.ApplicationUser", "User")
                        .WithMany("Enterprises_Users")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Enterprise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.Invoice", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Models.Subscription", "Subscription")
                        .WithOne("Invoice")
                        .HasForeignKey("MoreThanFollowUp.Domain.Models.Invoice", "SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.Subscription", b =>
                {
                    b.HasOne("MoreThanFollowUp.Domain.Models.Tenant", "Tenant")
                        .WithOne("Subscription")
                        .HasForeignKey("MoreThanFollowUp.Domain.Models.Subscription", "TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.Planning", b =>
                {
                    b.Navigation("Sprints");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.Project", b =>
                {
                    b.Navigation("Planning");

                    b.Navigation("Projects_Users");

                    b.Navigation("RequirementAnalysis");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.RequirementAnalysis", b =>
                {
                    b.Navigation("DirectOrFunctionalRequirement");

                    b.Navigation("Sprints");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Entities.Projects.Sprint", b =>
                {
                    b.Navigation("Sprint_Users");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.ApplicationRole", b =>
                {
                    b.Navigation("Users_Roles_Enteprises");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("Enterprises_Users");

                    b.Navigation("Projects_Users");

                    b.Navigation("Sprint_Users");

                    b.Navigation("Users_Roles_Enteprises");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.Enterprise", b =>
                {
                    b.Navigation("Enterprises_Users");

                    b.Navigation("Projects");

                    b.Navigation("Users_Roles_Enteprises");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.Subscription", b =>
                {
                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("MoreThanFollowUp.Domain.Models.Tenant", b =>
                {
                    b.Navigation("Enterprises");

                    b.Navigation("Subscription");
                });
#pragma warning restore 612, 618
        }
    }
}
